openapi: "3.0.3"
info:
  title: AuthenticateMe - an API for authentication
  description: "This is an Authorization server.  
  For sample, you can use the api key \"special-key\" to test the authentication"
  version: 1.0.0
  termsOfService: "http://auth.io/terms/"
  contact:
    email: "authMe@authm.io"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: https://{environment}.authenticate.com/
    variables:
      environment:
        default: api    # Production server
        enum:
          - api         # Production server
          - api.dev     # Development server
          - api.staging # Staging server

security:
  - basicAuth: []
    keyAuth: []


paths:
  /auth/register:
    post:
      summary: Create new user and user`s profile
      description: Creates new user and profile for user, taking "login" as a basic check of "existing" users
      operationId: createNewUser
      tags:
        - users

      requestBody:
        description: Basic information about the new user
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/RegistrationRequest'
      
      responses:
        "201":
          description: New user and profile created 
        "400":
          description: Bad request
        "401":
          $ref: '#/components/responses/UnauthorizedErr'
        "409":
          description: The profile with specified login exists already
        "500":
          description: Internal server error

  /auth/login:
    post:
      summary: Login the user
      description: logins the user and creates temporary token
      operationId: login
      tags:
        - users
        
      requestBody:
        description: information for user login
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/LoginRequest'
            example:
              login: johnny
              password: zzss22 #coded password
     
      responses:
        "200":
          description: The input is correct
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'       
        "400":
          description: Invalid request body   
        "401":
          $ref: '#/components/responses/UnauthorizedErr'
        "403":
          description: Invalid login or password or user deactivated
        "429":
          description: Attempts limit is reached
        "500":
          description: Internal server error

  /auth/deactivate:
    post:
      summary: Deactivate user
      description:  Deactivation for user not to be able to login, can be triggered either by user himself, either by "administrator" user or process.
      operationId: deactivateUser
      tags:
        - users

      parameters: 
        - in: header
          name: Authorization
          description: JWT is used to know if the user is authorized and allowed to perform the request
          schema:
            type: string
          required: true

      requestBody:
        description: information required for searching the user , for regular user only his login will be accepted, for admin user - any login from DB 
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/DeactivationRequest' 
            example:
              login: johnny
      
      responses:
        "200":
          description: deactivated cuccessfully 
        "400":
          description: Invalid request body  
        "401":
          $ref: '#/components/responses/UnauthorizedErr' 
        "403":
          description: User has no rights to perform operation
        "404":
          description: Invalid login - doesn`t exist in DB
        "406":
          description: User is deactivated already
        "500":
          description: Internal server error

  /auth/password_reset:
    post:
      summary: Password reset 
      description:  Feature provides an opportunity for user to reset the password(just for user himself)
      operationId: resetPassword
      tags:
        - users

      parameters: 
        - in: header
          name: Authorization
          description: JWT is used to know if the user is authorized
          schema:
            type: string
          required: true  

      requestBody:
        description: login, old password and new password with confirmation
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/ResetPWDRequest'
      
      responses:
        "201":
          description: New password for user is created 
        "400":
          description: Bad request
        "401":
          $ref: '#/components/responses/UnauthorizedErr'
        "403":
          description: Invalid data provided
        "500":
          description: Internal server error


  /auth/forgot_password:
    post:
      summary: Reset forgotten password 
      description:  Feature provides an opportunity for user to reset the forgotten password, via getting an email with "secret", secret is stored in DB
      operationId: resetForgottenPassword
      tags:
        - users

      requestBody:
        description: email
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/ForgotPWDRequest'
            example:
              email: example@mail.com
      
      responses:
        "200":
          description: The email was sent
        "400":
          description: Bad request
        "401":
          $ref: '#/components/responses/UnauthorizedErr'
        "404":
          description: Provided email not found in DB
        "500":
          description: Internal server error

  /auth/forgot_password_check_secret:
    get:
      summary: Reset forgotten password pt2
      description: Checking provided by user secret 
      operationId: resetForgottenPasswordPt2
      tags:
        - users

      requestBody:
        description: secret
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/ForgotPWDSecretConfirmationRequest'
            example:
              secret: blablabla234
      
      responses:
        "200":
            description: The input is correct
            content: 
              application/json:
                schema:
                  $ref: '#/components/schemas/ForgotPWDSecretConfirmationResponse'
        "400":
          description: Bad request
        "401":
          $ref: '#/components/responses/UnauthorizedErr'
        "403":
          description: Incorrect secret provided
        "500":
          description: Internal server error

  /auth/forgot_password_reset_password:
    post:
      summary: Reset forgotten password pt3
      description: Entering new password, if "verified" attribute on the profile is true
      operationId: resetForgottenPasswordPt3
      tags:
        - users

      requestBody:
        description: new password 
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/ForgotPWDSetNewPWDRequest'
            example:
              user_id: user1
              new_password: "1234"
              confirm_new_password: "1234"
      
      responses:
        "201":
          description: New password set
        "400":
          description: Bad request
        "401":
          $ref: '#/components/responses/UnauthorizedErr'
        "403":
          description: Provided passwords mismatch
        "500":
          description: Internal server error

components:
  securitySchemes:
    basicAuth:
      type: http
      description: Basic http authentication
      scheme: basic
    keyAuth:
      type: apiKey
      description: API key to authorize requests.
      in: header
      name: api_key
  responses:
    UnauthorizedErr:
      description: API key and/or basicAuth are invalid or missing
      headers:
        WWW_Authenticate:
          description: Unauthorized
          schema:
            type: string
    ForgotPWDSecretConfirmationResponse:
      type: object
      properties:
        user_id:
          type: string
        secret: 
          type: string
      required:
          - user_id
          - secret
      example:
          user_id: user1
          secret: blablabla234
  schemas:
    LoginRequest:
      type: object
      properties: 
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password 
      example:
        login: johnny
        password: zzss22 #coded password
    LoginResponse:
      type: object
      properties:
        userId: 
          type: string
        token:
          type: string 
      example:
          userId: 123456-456789-456789
          token: abCdEFg123HiJK456
    ForgotPWDRequest:
      type: object
      properties:
        email: 
          type: string
      required:
          - email
      example:
          email: example@mail.com
    ForgotPWDSecretConfirmationRequest:
      type: object
      properties:
        secret: 
          type: string
      required:
          - secret
      example:
          secret: blablabla234  
    ForgotPWDSecretConfirmationResponse:
      type: object
      properties:
        user_id:
          type: string
        secret: 
          type: string
      required:
          - user_id
          - secret
      example:
          user_id: user1
          secret: blablabla234
    ForgotPWDSetNewPWDRequest:
      type: object
      properties:
        user_id: 
          type: string
        new_password: 
          type: string
        confirm_new_password: 
          type: string
      required:
          - user_id
          - new_password
          - confirm_new_password
      example:
          user_id: "user1"
          new_password: "1234"
          confirm_new_password: "1234"
    ResetPWDRequest:
      type: object
      properties: 
        login:
          type: string
        old_password:
          type: string
        new_password:
          type: string
        confirm_new_password:
          type: string
      required:
        - login
        - old_password
        - new_password
        - confirm_new_password
      example:
        login: johnny
        old_password: zzss22 #coded password
        new_password: ddff11 #coded password
        confirm_new_password: ddff11 #coded password
    DeactivationRequest:
      type: object
      properties:
        login:
          type: string
      required:
          - login
      example:
          login : johnny     
    RegistrationRequest:
      type: object
      properties: 
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        social_media_links:
          type: array
          items:
            type: string
        login:
          type: string
        password:
          type: string  
      required:
        - login
        - password
        - first_name
        - last_name
        - email
      example:
          login: johnny
          password: zzss22 #coded password
          first_name: John
          last_name: Smith
          email: john@gmail.com
          social_media_links: 
            - www.instagramm.com@johnny
            - www.twitter.com#johnny
    